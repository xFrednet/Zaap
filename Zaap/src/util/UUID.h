#pragma once

#include <Common.h>
#include <Types.h>

namespace zaap
{
	//UUID is the shot therm for "universally unique identifier"
	//This UUID is 128 bits large and can be randomly generated by calling RandomUUID(UUID *uuid);
	struct ZAAP_API UUID
	{
		union
		{
			
			byte Data[16];

			struct
			{
				byte Data1[4];
				byte Data2[2];
				byte Data3[2];
				byte Data4[8];
			};
		};

		//String format UUID(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
		String toString() const;

		//operators
		bool operator==(const UUID &other) const;
		bool operator!=(const UUID &other) const;

		bool operator<(const UUID& other) const;
		bool operator>(const UUID& other) const;
		bool operator<=(const UUID& other) const;
		bool operator>=(const UUID& other) const;
	};
	
	ZAAP_API bool Equal(const UUID &a, const UUID &b);

	ZAAP_API bool Less(const UUID &a, const UUID &b);
	ZAAP_API bool Greater(const UUID &a, const UUID &b);

	ZAAP_API void RandomUUID(UUID *uuid);
}
