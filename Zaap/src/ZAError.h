#pragma once

//ZA_RESULT
//  
//   1 1 1 1 1 1 1
//   6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1
//  +-+-+-----------+---------------+
//  |R|I|--Source---|-----Code------|
//  +-+-+-----------+---------------+
//
//  R    - Result: 
//           0: success
//           1: error
//
//  I    - Intern, this value indicates if the message is 
//         from inside or outside the engine
//           0: inside
//           1: outside
//
//  Source - Indicates the source
//
//  Code   - The error code
//
typedef short								ZA_RESULT;

////////////////////////////////////////////////////////////////////////////////
// OPERATIONS //
////////////////////////////////////////////////////////////////////////////////
#define ZAAP_TYPEDEF_ZARESULT(x)			short(x)

#define ZA_FAILLED(x)  (x < 0)
#define ZA_SUCCEDED(x) (x >= 0)

////////////////////////////////////////////////////////////////////////////////
// Results //
////////////////////////////////////////////////////////////////////////////////

#define ZA_RESULT_ERROR						ZAAP_TYPEDEF_ZARESULT(0x8000)
#define ZA_RESULT_SUCCESS					ZAAP_TYPEDEF_ZARESULT(0x0000)
#define ZA_OK								ZAAP_TYPEDEF_ZARESULT(0x0000)

////////////////////////////////////////////////////////////////////////////////
// I //
////////////////////////////////////////////////////////////////////////////////
#define ZA_RESULT_EXTERN					ZAAP_TYPEDEF_ZARESULT(0x4000)
#define ZA_RESULT_INTERN					ZAAP_TYPEDEF_ZARESULT(0x0000)

////////////////////////////////////////////////////////////////////////////////
// Sources //
////////////////////////////////////////////////////////////////////////////////
#define ZA_RESULT_SOURCE_MATH				ZAAP_TYPEDEF_ZARESULT(0x0100) 

////////////////////////////////////////////////////////////////////////////////
// ZA_RESULT_SOURCE_MATH codes //
////////////////////////////////////////////////////////////////////////////////
#define ZA_ERROR_DIVISION_BY_ZERO			ZAAP_TYPEDEF_ZARESULT(0x8101)
