
////////////////////////////////////////////////////////////////////////////////
// General documentation // 
////////////////////////////////////////////////////////////////////////////////
{
	
	////////////////////////////////////////////////////////////////////////////////
	// Format stuff //
	////////////////////////////////////////////////////////////////////////////////
	{
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// ~ Headlines ~
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		/* //////////////////////////////////////////////////////////////////////////////// */
		// // HEADLINE 1 //
		/* //////////////////////////////////////////////////////////////////////////////// */
		
		/* ********************************************************* */
		// * HEADLINE 2 *
		/* ********************************************************* */
		
		/* ##################################### */
		// # HEADLINE 3 #
		/* ##################################### */
		
		
		
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// ~ List ~
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		// <Something>
		//    - List item 1 
		//      plus some extra text in the next line.
		//    - List item 2
		//    - List item 3
		//        - List item 3.1
		//        - List item 3.2
		//        - List item 3.3
	}
	
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Values //
	/* //////////////////////////////////////////////////////////////////////////////// */
	{
		// <Class>
		//      Class
		//
		// <Description>
		//      This class is super awesome.
		//
		// <Note>
		//      You can create a instance of this class but you have to 
		//      love it. You have to hug it every day and also kiss it 
		//      it every once in a while. 
		//      Do not treat this class as a object!
		//
		public class ZAAP_API Class [...]
		
		// <Struct>
		//      ZA_SUPER_STRUCT
		//
		// <Description>
		//      This struct is super but it's never used, sorry.
		//
		// <Note>
		//      This struct is super because I said so.
		//
		// <Members>
		//      IsSuper::
		//          This boolean is always true becuase this struct is always super.;;
		//      IsSuper2::
		//          This is just a second boolean to show of the formating.;;
		//
		typedef struct ZAAP_API ZA_SUPER_STRUCT_ {
			bool IsSuper;
			bool IsSuper2;
		} ZA_SUPER_STRUCT;
	}
	
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Values //
	/* //////////////////////////////////////////////////////////////////////////////// */
	{
		// <Value>
		//      ValueName
		//
		// <Description>
		//      This value indicates something.
		//
		// <Note>
		//      It is set to <DEFAULT> by default.
		//      
		Value ValueName = DEFAULT;
		
		// <Value>
		//      ValueName
		//
		// <Description>
		//      This boolean indicates something.
		//                    
		//          true:   
		//              This means that ValueName is awesome.
		//                  
		//          false:  
		//              This means that ValueName is kind of awesome.
		//      
		// <Note>
		//      It is set to <DEFAULT> by default.
		//
		bool ValueName = DEFAULT;
	}
	
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Util //
	/* //////////////////////////////////////////////////////////////////////////////// */
	{
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// ~ Return with a ZA_RESULT ~
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		// <Return>
		//      This returns a @ZA_RESULT which indicates if the method 
		//      executed successfully. 
		
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// ~ toString ~
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		// <Function>
		//      toString
		//
		// <Description>
		//      This combines the values of this @Class into a string.
		//
		// <Example>
		//      "Class(Color(R 1.0, G 1.0, B 1.0, A 1.0), Reflectivity: 0.0)"
		//
		// <Return>
		//      The String containing the information from this instance.
		//
		String toString() const;
	}
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Constructor / Deconstructor //
	/* //////////////////////////////////////////////////////////////////////////////// */
	{
		
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// ~ default constructor ~
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		// <Constructor>
		//      Class
		//
		// <Descripton>
		//      This creates a new instance of the @Class class.
		//
		Class();

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		// ~ virtual deconstructor ~
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		// <Deconstructor>
		//      Class
		//
		// <Description>
		//      This is a virtual deconstructor to support the deconstructors
		//      of the sub classes.
		//
	}
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Operators // 
	/* //////////////////////////////////////////////////////////////////////////////// */
	{		
		// <Function>
		//      operator==
		//
		// <Description>
		//      This method compares this and the given @Class.
		//
		// <Note>
		//      This calls the Equal method for this class.
		//      
		// <Input>
		//      other:
		//          The second object for comparison.
		//	
		// <Return>
		//      This returns the test result in form of a boolean.
		//
		inline bool operator==(const Class& other) const;

		// <Function>
		//      operator!=
		//
		// <Description>
		//      This method compares this and the given @Class.
		//
		// <Note>
		//      This calls the Equal method for this class.
		//  
		// <Input>
		//      other:
		//          The second object for comparison.
		//
		// <Return>
		//      This returns the test result in form of a boolean.
		//    
		inline bool operator!=(const Class& other) const;
		
		// <Function>
		//      Equal
		//      
		// <Description>
		//      This tests if the given @Classes are the same.
		//
		// <Note>
		//      This info is totaly not coppied and pasted for every Equal function.
		//
		// <Input>
		//      a:
		//          The first object for comparison.
		//      b:
		//          The second object for comparison.
		//       
		// <Return>
		//      This returns the test result in form of a boolean.
		//      
		ZAAP_API bool Equal(const Class& a, const Class& b);
	}

}

/* //////////////////////////////////////////////////////////////////////////////// */
// // ZaapCLI documentation // 
/* //////////////////////////////////////////////////////////////////////////////// */
{
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Constructor / Deconstructor //
	/* //////////////////////////////////////////////////////////////////////////////// */
	{
		// <Constructor>
		//      Class
		//
		// <Description>
		//      This creates a new CLI class from the given
		//      pointer instance.
		//
		// <Note> 
		//      This is only used for ZaapCLI intern stuff.
		//
		// <Input>
		//      instance:
		//          The existing instance of this class.
		//
		Class(zaap::Class* instance);
	
		// <Deconstructor>
		//      Class
		//
		// <Description>
		//      This deconstructor calls the cleanup method from 
		//      the original class.
		//
		// <Note>
		//      Just ignore it.
		//
		~Class();
	}
	
	/* //////////////////////////////////////////////////////////////////////////////// */
	// // Operators // 
	/* //////////////////////////////////////////////////////////////////////////////// */
	{
		// <Function>
		//      operator==
		//
		// <Description>
		//      This method compares this and the given @Class.
		//
		// <Input>
		//      other:
		//          The second object for comparison.
		//	
		// <Return>
		//      This returns the test result in form of a boolean.
		//
		bool operator==(Class^ other);

		// <Function>
		//      operator!=
		//
		// <Description>
		//      This method compares this and the given @Class.
		//
		// <Input>
		//      other:
		//          The second object for comparison.
		//
		// <Return>
		//      This returns the test result in form of a boolean.
		//    
		bool operator!=(Class^ other);
	}
}
